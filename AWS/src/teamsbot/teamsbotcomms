import axios from 'axios';
import { APIGatewayProxyHandler } from 'aws-lambda';

const BOT_APP_ID = process.env.BOT_APP_ID as string;
const BOT_APP_PASSWORD = process.env.BOT_APP_PASSWORD as string;
const TEAMS_CONVERSATION_ID = process.env.TEAMS_CONVERSATION_ID as string;
const TEAMS_SERVICE_URL = process.env.TEAMS_SERVICE_URL as string; // This should be obtained from an incoming message

// Function to get an authentication token from Microsoft
async function getAuthToken(): Promise<string> {
    const response = await axios.post('https://login.microsoftonline.com/botframework.com/oauth2/v2.0/token', 
        new URLSearchParams({
            grant_type: 'client_credentials',
            client_id: BOT_APP_ID,
            client_secret: BOT_APP_PASSWORD,
            scope: 'https://api.botframework.com/.default'
        }).toString(), 
        { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }
    );
    
    return response.data.access_token;
}

// Function to send a message to a Teams chat
async function sendMessageToTeams(accessToken: string, message: string) {
    const url = `${TEAMS_SERVICE_URL}/v3/conversations/${TEAMS_CONVERSATION_ID}/activities`;

    const payload = {
        type: 'message',
        text: message
    };

    const response = await axios.post(url, payload, {
        headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json'
        }
    });

    return response.data;
}

// AWS Lambda handler
export const handler: APIGatewayProxyHandler = async (event) => {
    try {
        const { message } = JSON.parse(event.body || '{}');

        if (!message) {
            return {
                statusCode: 400,
                body: JSON.stringify({ error: "Message is required" })
            };
        }

        const accessToken = await getAuthToken();
        const result = await sendMessageToTeams(accessToken, message);

        return {
            statusCode: 200,
            body: JSON.stringify({ success: true, result })
        };
    } catch (error) {
        console.error("Error sending message:", error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: "Internal Server Error", details: error })
        };
    }
};
