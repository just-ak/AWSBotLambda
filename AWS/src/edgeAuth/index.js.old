const { verify } = require('jsonwebtoken');
const jwkToPem = require('jwk-to-pem');
const https = require('https');

// Constants - hardcoded since Lambda@Edge doesn't support env variables
const COGNITO_USER_POOL_REGION = 'eu-west-2';
const COGNITO_USER_POOL_ID = 'eu-west-2_UkvybZ3Vg';
// const COGNITO_GROUP = 'eu-west-2_yjUI9x4ef_AzureAD';
const YOUR_CLIENT_ID = '6gjafv5cdsomfahdrgg5oscmqm'; // Replace with your actual client ID

// Cache for JWKs
let jwkCache = null;
let jwkCacheTime = 0;
const jwkCacheMaxAge = 60 * 60 * 1000; // 1 hour

/**
 * CloudFront Edge Lambda function to validate JWT tokens from Cognito
 */
exports.handler = async (event) => {
  const request = event.Records[0].cf.request;
  const headers = request.headers;
  
  try {
    console.log('Processing request for URI:', request.uri);
    
    // Check if this is a public path or asset - skip auth for these
    if (request.uri.startsWith('/public/') || request.uri.startsWith('/assets/') || 
        request.uri.endsWith('.js') || request.uri.endsWith('.css') || 
        request.uri.endsWith('.png') || request.uri.endsWith('.jpg') ||
        request.uri.endsWith('.ico') || request.uri.endsWith('.svg')) {
      console.log('Public resource, skipping authentication');
      return request;
    }
    
    // Check if this is an API path - skip auth for these as they have their own auth
    if (request.uri.startsWith('/prod/')) {
      console.log('API resource, skipping authentication');
      return request;
    }
    
    // Check for Cookie header with JWT
    const cookieHeader = headers.cookie || [];
    const cookies = parseCookies(cookieHeader);
    
    // Get the JWT from the cookie
    const idToken = cookies['auth_id_token'];
    if (!idToken) {
      console.log('No auth token found, redirecting to login');
      return redirectToLogin(request);
    }
    
    // Get the JWKs from cache or fetch them
    const jwks = await getJwks(COGNITO_USER_POOL_REGION, COGNITO_USER_POOL_ID);
    
    // Verify the JWT
    const decodedToken = await verifyToken(idToken, jwks);
    
    // Check if the user has the required group
    // if (COGNITO_GROUP && (!decodedToken.groups || !decodedToken.groups.includes(COGNITO_GROUP))) {
    //   console.log('User lacks required group membership');
    //   return generateError('403', 'Forbidden - Insufficient permissions');
    // }
    
    // Add user info to the request headers
    headers['x-user-id'] = [{ key: 'X-User-Id', value: decodedToken.sub }];
    headers['x-user-email'] = [{ key: 'X-User-Email', value: decodedToken.email || '' }];
    
    if (decodedToken.groups) {
      headers['x-user-groups'] = [{ key: 'X-User-Groups', value: decodedToken.groups.join(',') }];
    }
    
    return request;
  } catch (error) {
    console.error('Authentication error:', error);
    // If the token is expired or invalid, redirect to login
    return redirectToLogin(request);
  }
};

/**
 * Parse cookies from the Cookie header
 */
function parseCookies(cookieHeader) {
  const cookies = {};
  
  if (!cookieHeader || cookieHeader.length === 0) {
    return cookies;
  }
  
  cookieHeader.forEach((header) => {
    header.value.split(';').forEach((cookie) => {
      const parts = cookie.trim().split('=');
      if (parts.length >= 2) {
        cookies[parts[0]] = decodeURIComponent(parts[1]);
      }
    });
  });
  
  return cookies;
}

/**
 * Get JWKs from Cognito, using cache if available
 */
async function getJwks(region, userPoolId) {
  const now = Date.now();
  
  if (jwkCache && (now - jwkCacheTime < jwkCacheMaxAge)) {
    return jwkCache;
  }
  
  const jwksUrl = `https://cognito-idp.${region}.amazonaws.com/${userPoolId}/.well-known/jwks.json`;
  
  return new Promise((resolve, reject) => {
    https.get(jwksUrl, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        if (res.statusCode !== 200) {
          reject(new Error(`Failed to fetch JWKS: ${res.statusCode} ${data}`));
        } else {
          try {
            jwkCache = JSON.parse(data);
            jwkCacheTime = now;
            resolve(jwkCache);
          } catch (error) {
            reject(error);
          }
        }
      });
    }).on('error', reject);
  });
}

/**
 * Verify a JWT token using the JWKs
 */
async function verifyToken(token, jwks) {
  // Find the JWK that matches the token's key ID
  const decodedHeader = JSON.parse(Buffer.from(token.split('.')[0], 'base64').toString());
  const kid = decodedHeader.kid;
  
  const jwk = jwks.keys.find((key) => key.kid === kid);
  if (!jwk) {
    throw new Error('Invalid token: Key ID not found in JWKs');
  }
  
  // Convert JWK to PEM format
  const pem = jwkToPem(jwk);
  
  // Verify the token
  return new Promise((resolve, reject) => {
    verify(token, pem, { algorithms: ['RS256'] }, (err, decoded) => {
      if (err) {
        reject(err);
      } else {
        resolve(decoded);
      }
    });
  });
}

/**
 * Redirect to the Cognito login page
 */
function redirectToLogin(request) {
  // Get the domain from the request
  const host = request.headers.host[0].value;
  
  // Build Cognito domain
  const cognitoDomain = `${COGNITO_USER_POOL_ID.split('_')[0]}-auth`;
  
  // const redirectUri = `https://${host}${request.uri}/callback.html`;
    const redirectUri = 'https://api2.aws.akfdev.com/callback.html';
  const loginUrl = `https://api2-akfdev.auth.eu-west-2.amazoncognito.com/login?response_type=token&client_id=${YOUR_CLIENT_ID}&redirect_uri=${encodeURIComponent(redirectUri)}`;
  const response = {
    status: '302',
    statusDescription: 'Found',
    headers: {
      location: [{ key: 'Location', value: loginUrl }],
      'set-cookie': [
        { 
          key: 'Set-Cookie', 
          value: `AWSBotAuthRedirect=${encodeURIComponent(request.uri)}; Path=/; Secure; HttpOnly` 
        }
      ]
    }
  };
  
  return response;
}

/**
 * Generate an error response
 */
function generateError(status, message) {
  return {
    status,
    statusDescription: message,
    headers: {
      'content-type': [{ key: 'Content-Type', value: 'text/html; charset=utf-8' }]
    },
    body: `<html><body><h1>${status} - ${message}</h1></body></html>`
  };
}